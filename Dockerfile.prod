# 첫 번째 스테이지: 빌드 환경
FROM rust:1.83-alpine as builder

# 작업 디렉토리 생성
WORKDIR /app

# 필요한 패키지 설치
RUN apk add --no-cache \
    mariadb-connector-c-dev \
    build-base \
    musl-dev \
    jpeg-dev \
    zlib-dev \
    libffi-dev \
    curl \
    bash

# 애플리케이션 소스 복사
COPY . /app

# 종속성 설치
RUN cargo build --release

# 두 번째 스테이지: 실행 환경
FROM python:3.8.3-alpine

# 필요한 패키지 설치
RUN apk add --no-cache \
    mariadb-connector-c-dev \
    libffi-dev \
    curl \
    bash

# 작업 디렉토리 생성
WORKDIR /app

# 첫 번째 스테이지에서 빌드된 파일 복사
COPY --from=builder /app/target/release/my_app /app/

# requirements.txt 복사
COPY requirements.txt /app/

# 필요한 Python 패키지 설치
RUN python -m pip install --upgrade pip setuptools wheel
RUN pip install --no-cache-dir -r requirements.txt

# 애플리케이션 소스 복사
COPY . /app

# 실행 명령
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
# 첫 번째 스테이지: 빌드 환경
FROM rust:1.83.0-alpine as builder

# 작업 디렉토리 생성
WORKDIR /app

# 필요한 패키지 설치
RUN apk add --no-cache \
    mariadb-connector-c-dev \
    build-base \
    musl-dev \
    jpeg-dev \
    zlib-dev \
    libffi-dev \
    curl \
    bash

# 애플리케이션 소스 복사
COPY . /app

# 종속성 설치
RUN cargo build --release

# 두 번째 스테이지: 실행 환경
FROM python:3.8.3-alpine

# 필요한 패키지 설치
RUN apk add --no-cache \
    mariadb-connector-c-dev \
    libffi-dev \
    curl \
    bash

# 작업 디렉토리 생성
WORKDIR /app

# 첫 번째 스테이지에서 빌드된 파일 복사
COPY --from=builder /app/target/release/my_app /app/

# requirements.txt 복사
COPY requirements.txt /app/

# 필요한 Python 패키지 설치
RUN python -m pip install --upgrade pip setuptools wheel
RUN pip install --no-cache-dir -r requirements.txt

# 애플리케이션 소스 복사
COPY . /app

# 실행 명령
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
